@using DTNL.UmbracoCms.Web.Components
@using DTNL.UmbracoCms.Web.Components.FormElements
@using DTNL.UmbracoCms.Web.Helpers.Aliases
@using DTNL.UmbracoCms.Web.Helpers.Extensions
@using DTNL.UmbracoCms.Web.Models.Filters
@using Umbraco.Cms.Core.Dictionary
@model DTNL.UmbracoCms.Web.Components.FiltersModal

@inject ICultureDictionary CultureDictionary

@{
    string applyFilters = $"{CultureDictionary.GetTranslation(TranslationAliases.Common.Filters.ShowResults)} {Model.ResultsCount}";

    string resetFilters = CultureDictionary.GetTranslation(TranslationAliases.Common.Filters.ResetFilters);
}

<partial name="Modal" model="@(new Modal { Id= "modal-filters", Size = "aside", KeepScrollPosition = true, Class = "filters__modal modal--drawer-mobile-full-height", Hook = "js-hook-filters-modal", Attributes = new Dictionary<string, string?>
                        {
                            ["js-hook-replace-content"] = "modal-body-modal-filters",
                        }})">
    <form class="c-form filters__form" action="@(Model.ResultsOverviewPageUrl)" method="GET" data-async="true" js-hook-form>

        <partial name="Accordion"
                 model="@(new Accordion { Classes = "filters__accordion" })">

            <span></span>
            
            @if (Model.Sorter is not null)
            {
                <partial name="Accordion/AccordionItem" model="@(new Accordion.Item { Id = Model.Sorter.Name, Title = CultureDictionary.GetTranslation(TranslationAliases.Common.Filters.Sort) })">
                    <fieldset class="filters__accordion-options">
                        @(await Component.InvokeAsync("Radio", new
                        {
                            Model.Sorter.Name,
                            Model.Sorter.Options,
                            Classes = "filters__accordion-options-item",
                        }))
                    </fieldset>
                </partial>
            }

            @foreach (Filter filter in Model.Filters)
            {
                <partial name="Accordion/AccordionItem" model="@(new Accordion.Item { Id = filter.Name, Title = CultureDictionary.GetTranslation($"{filter.FilterNamePrefix}.{filter.Name}") })">
                    <fieldset class="filters__accordion-options @(filter.Options.Count > 4 ? "filters__accordion-options--hidden" : null)">
                        @(await Component.InvokeAsync(filter.Type, new
                        {
                            filter.Name,
                            Options = filter.Options.OfType<Checkbox.CheckboxOption>(),
                            Classes = "filters__accordion-options-item",
                         }))
                    </fieldset>
                </partial>

                @if (filter.Options.Count > 4)
                {
                    <partial name="Button" model="@(new Button {
                                                      Label = CultureDictionary.GetTranslation(TranslationAliases.Common.Filters.ShowAll),
                                                      Size = "small",
                                                      Variant = "link-underlined",
                                                      Class = "filters__options-link",
                                                      Element = "button",
                                                      Hook = "filters-show-more-options",
                                                  })"/>
                }
            }
        </partial>
    </form>

    <div class="filters__sticky-buttons-wrapper">
        <partial name="Button" model="@(new Button {
                                      Label = applyFilters,
                                      Class = "filters__sticky-button",
                                      Element = "button",
                                      Hook = "filters-sticky-button js-hook-filters-button-modal-close",
                                  })" />

        <partial name="Button" model="@(new Button {
                                      Label = resetFilters,
                                      Size = "small",
                                      Variant = "link-underlined",
                                      Element = "button",
                                      Hook = "filters-sticky-button js-hook-filters-reset-button",
                                  })" />
    </div>
</partial>


